/*! (c) Andrea Giammarchi */
const{is:s}=Object;let t;const e=s=>{const e=t;t=e||[];try{if(s(),!e)for(const s of t)s()}finally{t=e}};class i{constructor(s){this._=s}then(){return this.value}toJSON(){return this.value}toString(){return this.value}valueOf(){return this.value}}const h=({e:s})=>{for(const t of s)t.$=!0,h(t)};let n;const c=s=>{if(s.c.size){const e=n;n=e||[];for(const t of s.c)!t.$&&t.r.has(s)&&(t.$=!0,t.f?(n.push(t),h(t)):c(t.s));try{if(!e)for(const s of n)t?t.push((()=>{s.value})):s.value}finally{n=e}}};let o;class r extends i{constructor(s,t,e){super(s),this.f=!1,this.$=!1,this.s=null,this.r=new Set,this.o=e,this.v=t}get value(){const s=o;try{o=this,this.s?this.$&&(this.r.clear(),this.s.value=this._(this.s._)):this.s=new d(this._(this.v),this.v=this.o)}finally{this.$=!1,o=s}return this.s.value}}const l={async:!1,equals:!0},u=(s,t,e=l)=>new r(s,t,e);let a;const f=()=>{},v=s=>{for(const t of s)t.stop()};class p extends r{constructor(s,t,e){super(s,t,e).f=!0,this.i=0,this.a=!!e.async,this.m=!0,this.e=[]}get value(){this.a?this.async():this.sync()}async(){this.m&&(this.m=!1,queueMicrotask((()=>{this.m=!0,this.sync()})))}sync(){const s=a;a=this,this.i=0;const{length:t}=this.e;super.value,this.i<t&&v(this.e.splice(this.i));for(const{value:s}of this.e);a=s}stop(){this.s&&(this.r.clear(),this.s.c.clear()),this._=f,this.e.length&&v(this.e.splice(0))}}const y=(s,t,e=l)=>{let i;if(a){const{i:h,e:n}=a;h!==n.length&&n[h]._===s||(n[h]=new p(s,t,e)),i=n[h],a.i++}else(i=new p(s,t,e)).value;return()=>{i.stop()}},_=()=>!1;class d extends i{constructor(t,{equals:e}){super(t),this.c=new Set,this.s=!0===e?s:e||_}peek(){return this._}get value(){return o&&(this.c.add(o),o.r.add(this)),this._}set value(s){this.s(this._,s)||(this._=s,c(this))}}const g=(s,t=l)=>new d(s,t);export{i as Signal,e as batch,u as computed,y as effect,g as signal};
