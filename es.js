/*! (c) Andrea Giammarchi */
const{is:s}=Object;let t;const e=s=>{const e=t;t=e||[];try{if(s(),!e)for(const s of t)s()}finally{t=e}};class i{constructor(s){this._=s}then(){return this.value}toJSON(){return this.value}toString(){return this.value}valueOf(){return this.value}}const h=({e:s})=>{for(const t of s)t.$=!0,h(t)},n=(s,t)=>{for(const e of s.c)!e.$&&e.r.has(s)&&(e.$=!0,e.f?(t.push(e),h(e)):n(e.s,t));return t};let r;class c extends i{constructor(s,t,e){super(s),this.f=!1,this.$=!1,this.s=null,this.r=new Set,this.o=e,this.v=t}get value(){const s=r;try{r=this,this.s?this.$&&(this.r.clear(),this.s.value=this._(this.s._)):this.s=new _(this._(this.v),this.v=this.o)}finally{this.$=!1,r=s}return this.s.value}}const o={async:!1,equals:!0},l=(s,t,e=o)=>new c(s,t,e);let u;const a=()=>{},f=s=>{for(const t of s)t.stop()};class v extends c{constructor(s,t,e){super(s,t,e).f=!0,this.i=0,this.a=!!e.async,this.m=!0,this.e=[]}get value(){this.a?this.async():this.sync()}async(){this.m&&(this.m=!1,queueMicrotask((()=>{this.m=!0,this.sync()})))}sync(){const s=u;u=this,this.i=0;const{length:t}=this.e;super.value,this.i<t&&f(this.e.splice(this.i));for(const{value:s}of this.e);u=s}stop(){this.s&&(this.r.clear(),this.s.c.clear()),this._=a,this.e.length&&f(this.e.splice(0))}}const p=(s,t,e=o)=>{let i;if(u){const{i:h,e:n}=u;h!==n.length&&n[h]._===s||(n[h]=new v(s,t,e)),i=n[h],u.i++}else(i=new v(s,t,e)).value;return()=>{i.stop()}},y=()=>!1;class _ extends i{constructor(t,{equals:e}){super(t),this.c=new Set,this.s=!0===e?s:e||y}peek(){return this._}get value(){return r&&(this.c.add(r),r.r.add(this)),this._}set value(s){if(!this.s(this._,s)){this._=s;for(const s of n(this,[]))t?t.push((()=>{s.value})):s.value}}}const d=(s,t=o)=>new _(s,t);export{i as Signal,e as batch,l as computed,p as effect,d as signal};
