/*! (c) Andrea Giammarchi */
const{is:t}=Object;let s;const e=t=>{const e=s;s=e||[];try{if(t(),!e)for(const t of s)t()}finally{s=e}};class i{constructor(t){this._=t}toJSON(){return this.value}toString(){return this.value}valueOf(){return this.value}}const n=({e:t})=>{for(const s of t)s.$=!0,n(s)};let o;const c=({c:t})=>{if(t.size){const e=o;o=e||[];for(const s of t)if(s instanceof v)s.$||(s.$=!0,o.push(s),n(s));else{const e=s.deref();e?e.$||(e.$=!0,c(e.s)):t.delete(s)}try{if(!e)for(const t of o)s?s.push((()=>{t.value})):t.value}finally{o=e}}};let h;class r extends i{constructor(t,s){super(t),this.$=s,this.s=null}get value(){if(this.s){if(this.$)try{this.s.value=this._()}finally{this.$=!1}}else{const t=h;h=new Set;try{this.s=new p(this._());const s=this.$?this:new WeakRef(this);this.$=!1;for(const t of h)t.c.add(s)}finally{h=t}}return this.s.value}}const l=t=>new r(t);let u;const a=()=>{},f=t=>{for(const s of t)s.stop()};class v extends r{constructor(t,s){super(t,!0),this.i=0,this.a=s,this.m=s,this.e=[]}get value(){this.a?this.async():this.sync()}deref(){return this}async(){this.m&&(this.m=!1,queueMicrotask((()=>{this.m=!0,this.sync()})))}sync(){const t=u,{e:s}=this;(u=this).i=0;const{length:e}=s;super.value,u.i<e&&f(s.splice(u.i));for(const t of s)t.value;u=t}stop(){this.$=!0,this._=this.sync=this.async=a,this.e.length&&f(this.e.splice(0))}}const y=(t,s=!1)=>{let e;if(u){const{i:i,e:n}=u;i!==n.length&&n[i]._===t||(n[i]=new v(t,s)),e=n[i],u.i++}else(e=new v(t,s)).value;return()=>{e.stop()}};class p extends i{constructor(t){super(t).c=new Set}peek(){return this._}get value(){return h&&h.add(this),this._}set value(s){t(s,this._)||(this._=s,c(this))}}const $=t=>new p(t);export{i as Signal,e as batch,l as computed,y as effect,$ as signal};
