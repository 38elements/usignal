/*! (c) Andrea Giammarchi */
const{is:s}=Object;let t;const e=s=>{const e=t;t=e||[];try{if(s(),!e)for(const{value:s}of t);}finally{t=e}};class i{constructor(s){this._=s}then(){return this.value}toJSON(){return this.value}toString(){return this.value}valueOf(){return this.value}}let n;class o extends i{constructor(s,t,e,i){super(s),this.f=i,this.$=!0,this.r=new Set,this.s=new p(t,e)}get value(){if(this.$){const s=n;n=this;try{this.s.value=this._(this.s._)}finally{this.$=!1,n=s}}return this.s.value}}const c={async:!1,equals:!0},h=(s,t,e=c)=>new o(s,t,e,!1);let r;const l=()=>{};class u extends o{constructor(s,t,e){super(s,t,e,!0),this.i=0,this.a=!!e.async,this.m=!0,this.e=[]}get value(){this.a?this.async():this.sync()}async(){this.m&&(this.m=!1,queueMicrotask((()=>{this.m=!0,this.sync()})))}sync(){const s=r,{e:t}=r=this;if(this.i=0,super.value,this.i<t.length)for(const s of t.splice(this.i))s.stop();for(const{value:s}of t);r=s}stop(){this._=l,this.r.clear(),this.s.c.clear();for(const s of this.e.splice(0))s.stop()}}const a=(s,t,e=c)=>{let i;if(r){const{i:n,e:o}=r;n!==o.length&&o[n]._===s||(o[n]=new u(s,t,e)),i=o[n],r.i++}else(i=new u(s,t,e)).value;return()=>{i.stop()}},f=()=>!1;class p extends i{constructor(t,{equals:e}){super(t),this.c=new Set,this.s=!0===e?s:e||f}peek(){return this._}get value(){return n&&(this.c.add(n),n.r.add(this)),this._}set value(s){const e=this._;if(!this.s(this._=s,e)&&this.c.size){const s=[],e=[this];for(const t of e)for(const i of t.c)if(!i.$&&i.r.has(t))if(i.r.clear(),i.$=!0,i.f){s.push(i);const t=[i];for(const s of t)for(const e of s.e)e.r.clear(),e.$=!0,t.push(e)}else e.push(i.s);for(const e of s)t?t.push(e):e.value}}}const v=(s,t=c)=>new p(s,t);export{i as Signal,e as batch,h as computed,a as effect,v as signal};
